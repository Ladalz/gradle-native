plugins {
	id 'java'
	id 'dev.nokee.jni-library'
	id 'dev.nokee.cpp-language'
}

import dev.nokee.platform.jni.JarBinary
import dev.nokee.platform.jni.JvmJarBinary
import dev.nokee.platform.jni.JniJarBinary

library {
	targetMachines = [machines.macOS, machines.linux, machines.windows.x86, machines.windows.x86_64]
}

/**
 * Returns a Groovy closure that convert a list of {@link JniJarBinary} or {@link JvmJarBinary} to a list of FileTree
 * representing the JAR content.
 *
 * @return a transformer of {@link JarBinary} instances to {@link FileTree} of their JAR content.
 */
def asZipTrees() {
	return { jarBinaries ->
		jarBinaries*.jarTask*.map { zipTree(it.archiveFile) }
	}
}

tasks.register("uberJar", Jar) {
	from(library.binaries.withType(JniJarBinary).elements.map(asZipTrees())) { // <1>
		exclude 'META-INF/**'
	}
	from(library.binaries.withType(JvmJarBinary).elements.map(asZipTrees()))   // <2>
	archiveClassifier = "uber"
}
