digraph jniLibraryTaskGraph {
  graph [ dpi = 100, fontname="Sans"];
  node [fontname = "Sans"];
  edge [fontname = "Sans"];
  node [shape=rectangle, fixedsize=true, width=3.3, height=0.5];
  node [style=filled, fillcolor="#cfe2f3"]
  rankdir=LR

  subgraph cluster_cppLanguage {
	label = "C++ Language Plugin"
	color = black

	compileCpp [label=<compile<i>Variant</i>Cpp>]
  }

  subgraph cluster_cLanguage {
	label = "C Language Plugin"
	color = black

	compileC [label=<compile<i>Variant</i>C>]
  }

  subgraph cluster_objectiveCLanguage {
	label = "Objective-C Language Plugin"
	color = black

	compileObjC [label=<compile<i>Variant</i>ObjectiveC>]
  }

  subgraph cluster_objectiveCppLanguage {
	label = "Objective-C++ Language Plugin"
	color = black

	compileObjCpp [label=<compile<i>Variant</i>ObjectiveCpp>]
  }

  subgraph cluster_javaLanguage {
	label = "Java Language Plugin"

	{compileJava, processResources} -> classes [dir=back headport=w tailport=e]
	{rank=same compileJava processResources}
  }

  // Styling
  link [label=<link<i>Variant</i>>]
  sharedLibrary [label=<sharedLibrary<i>Variant</i>>]
  jarNative [style=dashed, label=<jar<i>Variant</i>>]
  jarJvm [label="jar"]

  // link to assemble
  {compileCpp compileC compileObjC compileObjCpp} -> link -> sharedLibrary -> jarNative [dir=back style=dashed headport=w tailport=e]
  link -> sharedLibrary[dir=back]
  sharedLibrary -> jarNative [dir=back style=dashed]

  {01, 02, 03 [width=0 shape=point];}
  02[label="multi-variant only" shape=plaintext]
  jarNative -> 01 [dir=back style=dashed]
  01 -> 02 -> 03 -> assemble [arrowhead=none style=dashed]
  {rank=same assemble 01 02 03 jarNative}

  {10, 20, 30 [width=0 shape=point];}
  20[label="single variant only" shape=plaintext]
  sharedLibrary -> 10 [dir=back style=dashed]
  10 -> 20 -> 30 -> jarJvm [arrowhead=none style=dashed]
  {rank=same jarJvm 10 20 30 sharedLibrary}

  // classes to assemble
  classes -> jarJvm [dir=back style=dashed]
  jarJvm -> assemble [dir=back]

  // assemble & check to build
  assemble -> build [dir=back]
  check -> build [dir=back]

  // align check & clean
  check -> clean [style=invis]
  {rank=same check clean}
}
