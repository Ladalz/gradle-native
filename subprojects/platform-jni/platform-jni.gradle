import javax.annotation.Nullable
import java.text.SimpleDateFormat

plugins {
	id 'dev.gradleplugins.java-gradle-plugin'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.4'
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withSourcesJar()
	withJavadocJar()
}

repositories {
	jcenter()
	maven { url = 'https://dl.bintray.com/gradle-plugins/distributions' }
}

dependencies {
	implementation 'org.apache.commons:commons-lang3:3.9'

	def lombokVersion = '1.18.12'
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	functionalTestImplementation gradleTestKit() // Until we support other kind of GradleExecutor
	functionalTestImplementation 'dev.nokee:templates:latest.integration'

	testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
}

tasks.named('javadoc', Javadoc) {
	exclude('**/internal/**')
}

gradlePlugin {
	plugins {
		jniLibrary {
			id = 'dev.nokee.jni-library'
			implementationClass = 'dev.nokee.platform.jni.internal.plugins.JniLibraryPlugin'
		}
		cppLanguage {
			id = 'dev.nokee.cpp-language'
			implementationClass = 'dev.nokee.language.cpp.internal.plugins.CppLanguagePlugin'
		}
		cLanguage {
			id = 'dev.nokee.c-language'
			implementationClass = 'dev.nokee.language.c.internal.plugins.CLanguagePlugin'
		}
		objectiveCLanguage {
			id = 'dev.nokee.objective-c-language'
			implementationClass = 'dev.nokee.language.objectivec.internal.plugins.ObjectiveCLanguagePlugin'
		}
		objectiveCppLanguage {
			id = 'dev.nokee.objective-cpp-language'
			implementationClass = 'dev.nokee.language.objectivecpp.internal.plugins.ObjectiveCppLanguagePlugin'
		}
	}
}

publishing {
	repositories {
		maven {
			name = 'docs'
			url = project(':docs').layout.buildDirectory.dir('repository')
		}
	}
}

@Nullable
private String resolveProperty(Project project, String envVarKey, String projectPropKey) {
	Object propValue = System.getenv().get(envVarKey);

	if (propValue != null) {
		return propValue.toString();
	}

	propValue = project.findProperty(projectPropKey);
	if (propValue != null) {
		return propValue.toString();
	}

	return null;
}

afterEvaluate {
	// TODO: Publish Gradle metadata
	if (System.getProperties().containsKey('release')) {
		bintray {
			override = false
			pkg {
				repo = 'distributions'
				name = 'dev.nokee:nokee-gradle-plugins'
				version {
					attributes = ['gradle-plugin': ["dev.nokee.jni-library:${project.group}:${project.name}",
													"dev.nokee.cpp-language:${project.group}:${project.name}",
													"dev.nokee.c-language:${project.group}:${project.name}",
													"dev.nokee.objective-c-language:${project.group}:${project.name}",
													"dev.nokee.objective-cpp-language:${project.group}:${project.name}"]]
				}
			}
		}
	} else {
		bintray {
			override = true
			pkg {
				repo = 'distributions-snapshots' // only for snapshot
				name = 'artifacts'
			}
		}
	}

	bintray {
		user = resolveProperty(project, "BINTRAY_USER", "dev.nokee.bintray.user")
		key = resolveProperty(project, "BINTRAY_KEY", "dev.nokee.bintray.key")
		publications = publishing.publications.collect { it.name }

		publish = true

		pkg {
			desc = project.description
			userOrg = 'nokeedev'
			websiteUrl = 'https://nokee.dev'
			issueTrackerUrl = 'https://github.com/nokeedev/gradle-native/issues'
			vcsUrl = 'https://github.com/nokeedev/gradle-native.git'
			labels = ['gradle', 'gradle-native']
			licenses = ['AGPL-V3'] // TODO: Clarify
			publicDownloadNumbers = false

			version {
				released = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ").format(new Date())
				// TODO: Sign artifacts
				gpg {
					sign = false
					passphrase = resolveProperty(project, "GPG_PASSPHRASE", "dev.nokee.bintray.gpgPassphrase")
				}
			}
		}
	}
}
