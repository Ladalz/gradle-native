plugins {
	id 'dev.gradleplugins.java-gradle-plugin'
	id 'maven-publish'
}

repositories {
	jcenter()
	mavenCentral()
	maven { url = 'https://dl.bintray.com/gradle-plugins/distributions' }
}

dependencies {
	api project(':platformBase')
	api project(':platformNative')

	implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
	implementation "com.google.guava:guava:${guavaVersion}"
//	implementation 'com.google.code.gson:gson:2.8.6'
	implementation "commons-io:commons-io:${commonsIoVersion}"
//	implementation 'org.eclipse.jetty:jetty-server:9.4.27.v20200227'
//	implementation 'org.apache.commons:commons-exec:1.3'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	functionalTestImplementation project(':platformNative')
	functionalTestImplementation 'dev.nokee:templates:latest.integration'
	functionalTestImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.71' // Because of java.lang.NoClassDefFoundError: kotlin/jvm/functions/Function0 from AbstractInstalledToolChains
	functionalTestImplementation "commons-io:commons-io:${commonsIoVersion}"
}

tasks.named('javadoc', Javadoc) {
	exclude('**/internal/**')

	StandardJavadocDocletOptions options = it.options as StandardJavadocDocletOptions
	options.setEncoding("utf-8")
	options.setDocEncoding("utf-8")
	options.setCharSet("utf-8")
	options.links("https://docs.oracle.com/javase/8/docs/api", "https://docs.gradle.org/${minimumGradleVersion}/javadoc/")
}

// TODO: Move to gradle-development-plugins
def pluginClasspathRuntimeOnly = configurations.create('pluginClasspathRuntimeOnly')
dependencies {
	add(pluginClasspathRuntimeOnly.name, project(':languageNative'))
}
tasks.named('pluginUnderTestMetadata', PluginUnderTestMetadata) {
	pluginClasspath.from(pluginClasspathRuntimeOnly)
}

gradlePlugin {
	plugins {
		jniLibrary {
			id = 'dev.nokee.jni-library'
			implementationClass = 'dev.nokee.platform.jni.internal.plugins.JniLibraryPlugin'
		}
	}
	extra {
		minimumGradleVersion = project.minimumGradleVersion
		withJavadocJar()
		withSourcesJar()
	}
}
