plugins {
	id 'dev.gradleplugins.java-gradle-plugin'
	id 'maven-publish'
}

repositories {
	jcenter()
	mavenCentral()
	maven { url = 'https://dl.bintray.com/gradle-plugins/distributions' }
}

dependencies {
	api project(':platformBase')
	api project(':platformNative')
	implementation project(':runtimeDarwin')
	implementation project(':runtimeNative')
	implementation project(':languageNative')

	implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
	implementation "com.google.guava:guava:${guavaVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	testImplementation platform("org.spockframework:spock-bom:${spockVersion}")
	testImplementation 'org.spockframework:spock-core'
	testImplementation "dev.gradleplugins:gradle-api:${minimumGradleVersion}"
	testImplementation 'org.hamcrest:hamcrest:2.2'
	testImplementation testFixtures(project(':platformNative'))
	testRuntimeOnly 'net.bytebuddy:byte-buddy:1.10.10' // Because NamingScheme is not an interface
	testRuntimeOnly 'org.objenesis:objenesis:3.1' // Because NamingScheme is not an interface

	functionalTestImplementation testFixtures(project(':languageNative'))
}

gradlePlugin {
	plugins {
		jniLibrary {
			id = 'dev.nokee.jni-library'
			implementationClass = 'dev.nokee.platform.jni.internal.plugins.JniLibraryPlugin'
		}
	}
}

components.functionalTest {
	dependencies {
		pluginUnderTestMetadata project(':languageNative')

		implementation project(':platformBase')
		implementation project(':platformNative')
		implementation project(':runtimeDarwin')
		implementation project(':runtimeNative')
		implementation 'dev.nokee:templates:latest.integration'
		implementation "commons-io:commons-io:${commonsIoVersion}"
		implementation project(':coreExec')
	}
}

// Unfortunately, because of the debt inherited from Gradle around how Windows toolchains are discovered
import org.gradle.internal.os.OperatingSystem
if (OperatingSystem.current().windows) {
	tasks.named('test', Test) {
		forkEvery(1)
	}
}
